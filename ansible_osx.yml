---
- hosts: localhost
  tasks:
    - name: Install homebrew
      include_role:
        name: geerlingguy.mac.homebrew

    - name: Make sure homebrew bin is in path
      ansible.builtin.lineinfile:
        path: /etc/paths
        state: present
        line: "/opt/homebrew/bin"
      become: true
      become_user: root

    - name: "add custom homebrew repos"
      community.general.homebrew_tap:
        name:
          [
            adoptopenjdk/openjdk,
            heroku/brew,
            homebrew/cask-versions,
            thoughtbot/formulae,
            weaveworks/tap,
          ]

    - name: Install core packages via brew casks
      community.general.homebrew_cask:
        name: "{{ item }}"
      ignore_errors: yes
      with_items:
        - 1password
        - android-sdk
        - android-studio
        - docker
        - google-chrome
        - google-cloud-sdk
        - iterm2
        - ngrok
        - slack
        - sublime-text
        - visual-studio-code
        - vlc
        - discord
        - whatsapp
        - postico

    - name: "Install homebrew packages"
      community.general.homebrew:
        name:
          [
            "autoconf",
            "automake",
            "awscli",
            "bfg",
            "coreutils",
            "curl",
            "direnv",
            "fzf",
            "gnu-time",
            "gpg",
            "heroku",
            "htop",
            "imagemagick@6",
            "libtool",
            "libxslt",
            "libyaml",
            "mas",
            "openssl",
            "pkg-config",
            "postgresql",
            "rcm",
            "readline",
            "redis",
            "sqlite3",
            "tmux",
            "unixodbc",
            "unzip",
            "vim",
            "watchman",
            "xz",
            "yarn",
            "zlib",
            "zsh",
            "gh",
            "magic-wormhole",
          ]
        state: present
        update_homebrew: yes

    - name: Get the path to ZSH
      become: false
      local_action: command which zsh
      register: zsh_path

    - name: Setup default iterm profile
      copy:
        src: templates/com.googlecode.iterm2.plist
        dest: "/Users/{{ lookup('env', 'USER') }}/Library/Preferences/com.googlecode.iterm2.plist"
        owner: "{{ lookup('env', 'USER') }}"
        force: true

    - name: "Ensure homebrew zsh is in allowed shells"
      lineinfile:
        path: /etc/shells
        line: "{{ zsh_path.stdout }}"
      become: true

    - name: Install Oh My ZSH
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      args:
        creates: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh"

    - name: Set ZSH as the default shell
      shell: chsh -s $(which zsh) {{ lookup('env', 'USER') }}
      become: true

    - name: "Create a default ZSH configuration"
      template:
        src: templates/.zshrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.zshrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Clone zsh-autosuggestions from github
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

    - name: Create a default VSCode configuration
      template:
        src: templates/vscode-settings.json.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/settings.json
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create a default VSCode keuybinding configuration
      template:
        src: templates/vscode-keybindings.json.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/keybindings.json
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Install VSCode extensions
      shell: code --install-extension {{ item }}
      with_items:
        - ms-vscode-remote.vscode-remote-extensionpack
        - ms-vscode.sublime-keybindings
        - eamodio.gitlens

    - name: Clone ASDF from github
      git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "/Users/{{ lookup('env', 'USER') }}/.asdf"
        version: v0.9.0

    - name: "Create a default asdf configuration"
      template:
        src: templates/.asdfrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.asdfrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: "Install asdf plugins"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf plugin-add {{ item }} || exit 0
      with_items:
        - ruby
        - nodejs
        - python

    - name: "Install Default Python"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf install python 3.9.10
        asdf global python 3.9.10
        pip3 install ansible
        asdf reshim python

    - name: "Install Default Ruby"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf install ruby 3.1.0
        asdf global ruby 3.1.0
        gem install bundler
        gem install cocoapods
        gem install rubocop
        gem install solargraph

    - name: "Install default node"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        bash /Users/{{ lookup('env', 'USER') }}/.asdf/plugins/nodejs/bin/import-release-team-keyring
        asdf install nodejs 17.4.0
        asdf global nodejs 17.4.0

    - name: Install yarn packages
      shell: yarn global add {{ item }}
      with_items:
        - create-react-app

    - name: re-generate bins now we've installed some yarn packages
      shell: asdf reshim nodejs
